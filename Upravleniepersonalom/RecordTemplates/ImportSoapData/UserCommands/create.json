{
  "$type": "Comindware.Platform.Contracts.UserCommandConfigurationModel, Comindware.Platform.Contracts",
  "GlobalAlias": {
    "$type": "Comindware.Platform.Contracts.GlobalAlias, Comindware.Platform.Contracts",
    "Type": "UserCommand",
    "Owner": "ImportSoapData",
    "Alias": "create"
  },
  "Name": "Создать",
  "IsSystem": false,
  "IsDisabled": false,
  "IsPrepare": false,
  "SkipValidation": false,
  "Context": "Record",
  "Multiplicity": "OneByOne",
  "Kind": "Create",
  "ResultType": "DataChange",
  "ScriptRule": {
    "$type": "Comindware.Platform.Contracts.UserCommandScriptRuleModel, Comindware.Platform.Contracts",
    "Type": "UserCommandScript",
    "Definition": {
      "$type": "Comindware.Platform.Contracts.CSharpRuleDefinitionModel, Comindware.Platform.Contracts",
      "EntryPoint": "Script",
      "Code": "\tusing System; \n\tusing System.Collections.Generic;\n\tusing System.Linq;\n\tusing Comindware.Data.Entity;\n\tusing Comindware.TeamNetwork.Api.Data.UserCommands;\n\tusing Comindware.TeamNetwork.Api.Data;\n\tusing System.Xml;\n\tusing System.Net;\n\tusing System.IO;\n\n\tclass Script\n\t{\n\t\t\n\t    public static UserCommandResult Main(UserCommandContext userCommandContext, Comindware.Entities entities)\n\t    { \n\n\t\t\t//List<Dictionary<string, List<Id>>> data = new List<Dictionary<string, List<Id>>>();\n\t\t\tstring ret = \"\";\n\t\t\tstring ret2 = \"\";\n\t\t\tstring t = \"\";\n\t\t\tList<string> parsedIndividuals = new List<string> ();\n\t\t\tvar depts = Api.TeamNetwork.ObjectService.ListWithAlias (\"Podrazdeleniya\");\n\t\t\tforeach (var dept in depts) {\n\t\t\t\tif (dept.ContainsKey (\"code\") ? (string)dept [\"code\"] != \"\" : false)\n\t\t\t\t{\n\t\t\t\t\tret = GetWorkers(\"00001\"/* (string)dept [\"code\"] */);\n\t\t\t\t\tif (ret != \"\")\n\t\t\t\t\t{\n\t\t\t\t\t\tvar workPlaces = JsonConvert.DeserializeObject<List<Dictionary<string, List<Id>>>>(ret);\n\t\t\t\t\t\tforeach (var workPlace in workPlaces)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tId fl = workPlace.First().Value[0];\n\t\t\t\t\t\t\t//t = fl.idIndividual.ToString();\n\t\t\t\t\t\t\tret2 = GetIndividual(fl.idIndividual.ToString());\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tvar ind = JsonConvert.DeserializeObject<Ind>(ret2);\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tvar indData = Api.TeamNetwork.ObjectService.Get (\"Kandidaty\", new Dictionary<string,object>{{\"IDdlyaintegratsii\", fl.idIndividual.ToString()}}, new List<string> {\"id\"});\n\t\t\t\t\t\t\t// создадим ФЛ\n\t\t\t\t\t\t\tif (indData == null)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tvar data = new Dictionary<string,object>();\n\t\t\t\t\t\t\t\tdata[\"IDdlyaintegratsii\"] = fl.idIndividual.ToString();\n\t\t\t\t\t\t\t\tdata[\"Familiya\"] = ind.Individual.Name1;\n\t\t\t\t\t\t\t\tdata[\"Imya\"] = ind.Individual.Name2;\n\t\t\t\t\t\t\t\tdata[\"Otchestvo\"] = ind.Individual.Name3;\n\t\t\t\t\t\t\t\tdata[\"Pol\"] = (int)ind.Individual.Sex.ID == 1;\n\t\t\t\t\t\t\t\tdata[\"Datarozhdeniya\"] = DateTime.ParseExact(ind.Individual.Birthday, \"dd.MM.yyyy\", null);\n\t\t\t\t\t\t\t\tdata[\"SNILS\"] = ind.Individual.SNILS;\n\t\t\t\t\t\t\t\tdata[\"Seriya\"] = ind.Passport.paspSer;\n\t\t\t\t\t\t\t\tdata[\"Nomer\"] = ind.Passport.paspNum;\n\t\t\t\t\t\t\t\tdata[\"Kemvydan\"] = ind.Passport.paspProduceUnit;\n\t\t\t\t\t\t\t\tdata[\"Kodpodrazdeleniya\"] = ind.Passport.paspPodrCode;\n\t\t\t\t\t\t\t\tdata[\"Kogdavydan\"] = DateTime.ParseExact(ind.Passport.paspPropduceDate, \"dd.MM.yyyy\", null);\n\t\t\t\t\t\t\t\tdata[\"Adres\"] = ind.Passport.paspRegistration;\n\t\t\t\t\t\t\t\tdata[\"Mestorozhdeniya\"] = ind.Passport.birthPlace;\n\t\t\t\t\t\t\t\tdata[\"Email\"] = ind.Contact.Email[0].Value;\nreturn new UserCommandResult\n{\n\tSuccess = false,\n\tCommited = false,\n\tResultType = UserCommandResultType.DataChange,\n\tMessages = new[]\n\t{\n\t\tnew UserCommandMessage\n\t\t{\n\t\t\tSeverity = SeverityLevel.Normal,\n\t\t\tText = JsonConvert.SerializeObject(data)\n\t\t\t//Text = \"ok\"//JsonConvert.SerializeObject(data2)\n\t\t}\n\t}\n};\n\t\t\t\t\t\t\t\tdata[\"Tel\"] = ind.Contact.Phone[0].Value;\n\t\t\t\t\t\t\t\tindData [\"id\"] = Api.TeamNetwork.ObjectService.CreateWithAlias (\"Kandidaty\", data);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tvar assignData = Api.TeamNetwork.ObjectService.Get (\"MestarabotyFL\", new Dictionary<string,object>{{\"FL\", indData [\"id\"]},{\"Podrazdelenie\", dept [\"id\"]}}, new List<string> {\"id\"});\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif (assignData == null) {\n\t\t\t\t\t\t\t\tvar data2 = new Dictionary<string,object>();\n\t\t\t\t\t\t\t\tdata2[\"FL\"] = indData [\"id\"];\n\t\t\t\t\t\t\t\tdata2[\"Podrazdelenie\"] = dept [\"id\"];\n\t\t\t\t\t\t\t\tdata2[\"Osnovnoe\"] = fl.idWageRate;\n\t\t\t\t\t\t\t\tdata2[\"CategoryPPS\"] = fl.CategoryPPS;\n\t\t\t\t\t\t\t\tdata2[\"CategoryScientist\"] = fl.CategoryScientist;\n\t\t\t\t\t\t\t\tdata2[\"СombinePositionIn\"] = fl.СombinePositionIn;\n\t\t\t\t\t\t\t\tdata2[\"СombinePositionOut\"] = fl.СombinePositionOut;\n\t\t\t\t\t\t\t\tdata2[\"StartDate\"] = DateTime.ParseExact(fl.StartDate, \"dd.MM.yyyy\", null);\n\t\t\t\t\t\t\t\tdata2[\"EndDate\"] = DateTime.ParseExact(fl.EndDate, \"dd.MM.yyyy\", null);\n\t\t\t\t\t\t\t\tdata2[\"workerId\"] = fl.workerId;\n\t\t\t\t\t\t\t\tdata2[\"stuffUID\"] = fl.stuffUID;\n\t\t\t\t\t\t\t\tApi.TeamNetwork.ObjectService.CreateWithAlias (\"MestarabotyFL\", data2);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\treturn new UserCommandResult\n\t\t\t{\n\t\t\t\tSuccess = true,\n\t\t\t\tCommited = true,\n\t\t\t\tResultType = UserCommandResultType.DataChange,\n\t\t\t\tMessages = new[]\n\t\t\t\t{\n\t\t\t\t\tnew UserCommandMessage\n\t\t\t\t\t{\n\t\t\t\t\t\tSeverity = SeverityLevel.Normal,\n\t\t\t\t\t\t//Text = JsonConvert.SerializeObject(ret2)\n\t\t\t\t\t\tText = \"ok\"//JsonConvert.SerializeObject(data2)\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\t    }\n\n\t\t// Root myDeserializedClass = JsonConvert.DeserializeObject<Root>(myJsonResponse); \n\t\tpublic class SexClass    {\n\t\t\tpublic string Name { get; set; } \n\t\t\tpublic int ID { get; set; } \n\t\t}\n\n\t\tpublic class IndividualClass    {\n\t\t\tpublic string Name1 { get; set; } \n\t\t\tpublic string Name2 { get; set; } \n\t\t\tpublic string Name3 { get; set; } \n\t\t\tpublic SexClass Sex { get; set; } \n\t\t\tpublic string Birthday { get; set; } \n\t\t\tpublic string SNILS { get; set; } \n\t\t\tpublic string SNILS_RegDate { get; set; } \n\t\t}\n\n\t\tpublic class CitizenshipClass    {\n\t\t\tpublic string ID { get; set; } \n\t\t\tpublic string Name { get; set; } \n\t\t}\n\n\t\tpublic class KindClass    {\n\t\t\tpublic int ID { get; set; } \n\t\t\tpublic string Name { get; set; } \n\t\t}\n\n\t\tpublic class Passport    {\n\t\t\tpublic string paspSer { get; set; } \n\t\t\tpublic string paspNum { get; set; } \n\t\t\tpublic string paspProduceUnit { get; set; } \n\t\t\tpublic string paspPodrCode { get; set; } \n\t\t\tpublic string paspPropduceDate { get; set; } \n\t\t\tpublic string paspRegistration { get; set; } \n\t\t\tpublic CitizenshipClass Citizenship { get; set; } \n\t\t\tpublic KindClass Kind { get; set; } \n\t\t\tpublic string birthPlace { get; set; } \n\t\t}\n\n\t\tpublic class Kind2    {\n\t\t\tpublic string ID { get; set; } \n\t\t\tpublic string Name { get; set; } \n\t\t}\n\n\t\tpublic class Email    {\n\t\t\tpublic string Value { get; set; } \n\t\t\tpublic Kind2 Kind { get; set; } \n\t\t}\n\n\t\tpublic class Kind3    {\n\t\t\tpublic string ID { get; set; } \n\t\t\tpublic string Name { get; set; } \n\t\t}\n\n\t\tpublic class PhoneClass    {\n\t\t\tpublic string Value { get; set; } \n\t\t\tpublic Kind3 Kind { get; set; } \n\t\t\tpublic string ValueRaw { get; set; } \n\t\t}\n\n\t\tpublic class ContactClass    {\n\t\t\tpublic List<Email> Email { get; set; } \n\t\t\tpublic List<PhoneClass> Phone { get; set; } \n\t\t}\n\n\t\tpublic class CountryClass    {\n\t\t\tpublic string ID { get; set; } \n\t\t\tpublic string Name { get; set; } \n\t\t}\n\n\t\tpublic class Kind4    {\n\t\t\tpublic string ID { get; set; } \n\t\t\tpublic string Name { get; set; } \n\t\t}\n\n\t\tpublic class AddressClass    {\n\t\t\tpublic CountryClass Country { get; set; } \n\t\t\tpublic string Region { get; set; } \n\t\t\tpublic string District { get; set; } \n\t\t\tpublic string City { get; set; } \n\t\t\tpublic string Village { get; set; } \n\t\t\tpublic string Street { get; set; } \n\t\t\tpublic string House { get; set; } \n\t\t\tpublic string Corpus { get; set; } \n\t\t\tpublic string Room { get; set; } \n\t\t\tpublic string PostIndex { get; set; } \n\t\t\tpublic Kind4 Kind { get; set; } \n\t\t\tpublic string Str { get; set; } \n\t\t}\n\n\t\tpublic class FamilyClass    {\n\t\t\tpublic string Relation { get; set; } \n\t\t\tpublic string Tel { get; set; } \n\t\t\tpublic string FIO { get; set; } \n\t\t}\n\n\t\tpublic class Ind    {\n\t\t\tpublic IndividualClass Individual { get; set; } \n\t\t\tpublic Passport Passport { get; set; } \n\t\t\tpublic ContactClass Contact { get; set; } \n\t\t\tpublic List<AddressClass> Address { get; set; } \n\t\t\tpublic List<FamilyClass> Family { get; set; } \n\t\t\tpublic string Education { get; set; } \n\t\t\tpublic string Work { get; set; } \n\t\t\tpublic string Study { get; set; } \n\t\t\tpublic string Application { get; set; } \n\t\t}\n\t\t\n\t// Root myDeserializedClass = JsonConvert.DeserializeObject<Root>(myJsonResponse); \n\t\tpublic class PositionClass    {\n\t\t\tpublic string ID { get; set; } \n\t\t\tpublic string Name { get; set; } \n\t\t}\n\n\t\tpublic class Id    {\n\t\t\tpublic int idIndividual { get; set; } \n\t\t\tpublic decimal idWageRate { get; set; } \n\t\t\tpublic PositionClass Position { get; set; } \n\t\t\tpublic string Category { get; set; } \n\t\t\tpublic int CategoryPPS { get; set; } \n\t\t\tpublic int CategoryScientist { get; set; } \n\t\t\tpublic int СombinePositionIn { get; set; } \n\t\t\tpublic int СombinePositionOut { get; set; } \n\t\t\tpublic string StartDate { get; set; } \n\t\t\tpublic string EndDate { get; set; } \n\t\t\tpublic string workerId { get; set; } \n\t\t\tpublic string stuffUID { get; set; } \n\t\t}\n\n\t\tpublic static string GetWorkers(string par)\n\t\t{\n\t\t\tvar _url = \"https://up.mipt.ru/up/ws/PersonsInformation.1cws?\";\n\t\t\tvar _action = \"GetWorkers\";\n\t\t\tXmlDocument soapEnvelopeXml = CreateSoapEnvelopeGetWorkers (par);\n\t\t\treturn CallWebService (_url, _action, soapEnvelopeXml);\n\t\t}\n\t\tpublic static string GetIndividual(string par)\n\t\t{\n\t\t\tvar _url = \"https://up.mipt.ru/up/ws/PersonsInformation.1cws?\";\n\t\t\tvar _action = \"GetIndividual\";\n\t\t\tXmlDocument soapEnvelopeXml = CreateSoapEnvelopeGetIndividual (par);\n\t\t\treturn CallWebService (_url, _action, soapEnvelopeXml);\n\t\t}\n\t\t\n\t\tprivate static XmlDocument CreateSoapEnvelopeGetWorkers(string par)\n\t\t{\n\t\t\tXmlDocument soapEnvelopeDocument = new XmlDocument();\n\t\t\tsoapEnvelopeDocument.LoadXml(\n\t\t\t@\"<soap:Envelope xmlns:xsd=\"\"http://www.w3.org/1999/XMLSchema\"\" xmlns:soap=\"\"http://schemas.xmlsoap.org/soap/envelope/\"\">\n\t\t\t\t<soap:Body>\n\t\t\t\t\t<GetWorkers xmlns=\"\"MFTI.ru\"\">\n\t\t\t\t\t\t<departmentId>\" + par + @\"</departmentId>\n\t\t\t\t\t</GetWorkers>\n\t\t\t\t</soap:Body>\n\t\t\t</soap:Envelope>\");\n\t\t\treturn soapEnvelopeDocument;\n\t\t}\n\t\tprivate static XmlDocument CreateSoapEnvelopeGetIndividual(string par)\n\t\t{\n\t\t\tXmlDocument soapEnvelopeDocument = new XmlDocument();\n\t\t\tsoapEnvelopeDocument.LoadXml(\n\t\t\t@\"<soap:Envelope xmlns:xsd=\"\"http://www.w3.org/1999/XMLSchema\"\" xmlns:soap=\"\"http://schemas.xmlsoap.org/soap/envelope/\"\">\n\t\t\t\t<soap:Body>\n\t\t\t\t\t<GetIndividual xmlns=\"\"MFTI.ru\"\">\n\t\t\t\t\t\t<individualId>\" + par + @\"</individualId>\n\t\t\t\t\t\t<dataBlocks>Individual.Passport.Contact.Address.Family</dataBlocks>\n\t\t\t\t\t</GetIndividual>\n\t\t\t\t</soap:Body>\n\t\t\t</soap:Envelope>\");\n\t\t\treturn soapEnvelopeDocument;\n\t\t}\n\n\t\tpublic static string CallWebService(string _url, string _action, XmlDocument soapEnvelopeXml)\n\t\t{\n\t\t\tHttpWebRequest webRequest = CreateWebRequest(_url, _action);\n\t\t\tInsertSoapEnvelopeIntoWebRequest(soapEnvelopeXml, webRequest);\n\n\t\t\t// begin async call to web request.\n\t\t\tIAsyncResult asyncResult = webRequest.BeginGetResponse(null, null);\n\n\t\t\t// suspend this thread until call is complete. You might want to\n\t\t\t// do something usefull here like update your UI.\n\t\t\tasyncResult.AsyncWaitHandle.WaitOne();\n\n\t\t\t// get the response from the completed web request.\n\t\t\tstring soapResult;\n\t\t\tusing (WebResponse webResponse = webRequest.EndGetResponse(asyncResult))\n\t\t\t{\n\t\t\t\tusing (StreamReader rd = new StreamReader(webResponse.GetResponseStream()))\n\t\t\t\t{\n\t\t\t\t\tsoapResult = rd.ReadToEnd();\n\t\t\t\t}\n\t\t\t\t//Console.Write(soapResult);       \n\t\t\t\tXmlDocument doc = new XmlDocument();\n\t\t\t\tdoc.LoadXml(soapResult);\n\t\t\t\tvar json = doc.GetElementsByTagName(\"m:return\");\n\t\t\t\tif (json.Count > 0)\n\t\t\t\t\treturn json[0].InnerText;\n\t\t\t\telse\n\t\t\t\t\treturn \"\";\n\t\t\t}\n\t\t\t\n\t\t}\n\n\t\tprivate static HttpWebRequest CreateWebRequest(string url, string action)\n\t\t{\n\t\t\tHttpWebRequest webRequest = (HttpWebRequest)WebRequest.Create(url);\n\t\t\twebRequest.Headers.Add(\"SOAPAction\", action);\n\t\t\twebRequest.Headers.Add(\"Authorization\", \"Basic V2ViU2VydmljZUVtcGxveVdvcmtlcnM6TEpqNWlXVg==\");\n\t\t\twebRequest.ContentType = \"text/xml;charset=\\\"utf-8\\\"\";\n\t\t\twebRequest.Accept = \"text/xml\";\n\t\t\twebRequest.Method = \"POST\";\n\t\t\treturn webRequest;\n\t\t}\n\n\n\t\tprivate static void InsertSoapEnvelopeIntoWebRequest(XmlDocument soapEnvelopeXml, HttpWebRequest webRequest)\n\t\t{\n\t\t\tusing (Stream stream = webRequest.GetRequestStream())\n\t\t\t{\n\t\t\t\tsoapEnvelopeXml.Save(stream);\n\t\t\t}\n\t\t}\n\t}",
      "Type": "CSharpExpression"
    }
  },
  "RelatedAction": {
    "$type": "Comindware.Platform.Contracts.UserCommandRelatedActionModel, Comindware.Platform.Contracts",
    "ContainerGlobalAlias": {
      "$type": "Comindware.Platform.Contracts.GlobalAlias, Comindware.Platform.Contracts",
      "Type": "RecordTemplate",
      "Alias": "ImportSoapData"
    },
    "TemplateGlobalAlias": {
      "$type": "Comindware.Platform.Contracts.GlobalAlias, Comindware.Platform.Contracts",
      "Type": "Undefined"
    },
    "FormGlobalAlias": {
      "$type": "Comindware.Platform.Contracts.GlobalAlias, Comindware.Platform.Contracts",
      "Type": "Form",
      "Owner": "ImportSoapData",
      "Alias": "defaultForm"
    }
  },
  "RelatedEntityGlobalAlias": {
    "$type": "Comindware.Platform.Contracts.GlobalAlias, Comindware.Platform.Contracts",
    "Type": "Undefined"
  },
  "LockStateChangeType": "Undefined",
  "LockStateVisibilityType": "Undefined"
}