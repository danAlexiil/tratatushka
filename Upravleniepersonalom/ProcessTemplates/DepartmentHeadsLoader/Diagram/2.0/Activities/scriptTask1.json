{
  "$type": "Comindware.Platform.Contracts.TaskActivityModel, Comindware.Platform.Contracts",
  "GlobalAlias": {
    "$type": "Comindware.Platform.Contracts.GlobalAlias, Comindware.Platform.Contracts",
    "Type": "Activity",
    "Owner": "DepartmentHeadsLoader",
    "Alias": "scriptTask1"
  },
  "Kind": "Script",
  "ScriptDefinition": {
    "$type": "Comindware.Platform.Contracts.ScriptTaskDefinitionModel, Comindware.Platform.Contracts",
    "MaxExecutionTime": "03:00:00",
    "AttemptCount": 1,
    "AttemptInterval": "00:00:00",
    "Script": {
      "$type": "Comindware.Platform.Contracts.CustomRuleModel, Comindware.Platform.Contracts",
      "Type": "Custom",
      "Definition": {
        "$type": "Comindware.Platform.Contracts.CSharpRuleDefinitionModel, Comindware.Platform.Contracts",
        "Code": "using System; \nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nusing System.Net;\nusing System.Text;\nusing System.Xml;\n\nusing Comindware.Data.Entity;\nusing Comindware.TeamNetwork.Api.Data.UserCommands;\nusing Comindware.TeamNetwork.Api.Data;\n\n\nclass Script\n{\n\tprivate const string COMMAND_PATTERN = @\"<?xml version=\"\"1.0\"\" encoding=\"\"utf-8\"\"?>\n    <soapenv:Envelope xmlns:soapenv=\"\"http://schemas.xmlsoap.org/soap/envelope/\"\" xmlns:dep=\"\"http://www.MFTI.ru/xml/departmets\"\">\n   <soapenv:Header/>\n   <soapenv:Body>\n      <dep:GetHeadsOfDepartment>\n         <dep:Date>2020-09-29</dep:Date>\n         <dep:DepartmentID>?</dep:DepartmentID>\n      </dep:GetHeadsOfDepartment>\n   </soapenv:Body>\n</soapenv:Envelope>\";\n\n\tprivate const string SOAP_ACTION = @\"http://www.MFTI.ru/xml/departmets#MFTI_DepartmentsData:GetHeadsOfDepartment\";\n\t\n\tprivate const string SOAP_URL = @\"http://devfin.mipt.ru/zik30/ws/DepartmentsData.1cws?\";\n\t\n\tprivate const string DEPARTMENTS = @\"DepartmentHeads\";\n\t\n\tpublic static void Main(Comindware.Process.Api.Data.ScriptContext context, Comindware.Entities entities)\n\t{\n        try{\n        List<Employee> heads = GetHeadsOfDepartment();\n\t\tUpdateHeads(heads);    \n        }\n        catch (Exception exc)\n        {\n            string message = exc.ToString();\n            throw new Exception(message);\n        }\n\t\t\n\t}\n\t\n\tprivate static void UpdateHeads(List<Employee> heads)\n\t{\n\t\tforeach(var emp in heads)\n\t\t{\n\t\t\tvar recordData = Api.TeamNetwork.ObjectService.Get (DEPARTMENTS, \n\t\t\t\tnew Dictionary<string,object>{{\"Position\", emp.Position.ToString()}, {\"DepartmentESO\", emp.DepartmentESO}}, new List<string> {\"id\"});\n\t\t\tvar record = new Dictionary<string, object>();\n\t\t\tFillHeadRecord(record, emp);\n\t\t\tif (recordData == null)\n\t\t\t{\t\n\t\t\t\tApi.TeamNetwork.ObjectService.CreateWithAlias (DEPARTMENTS, record);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tvar recordId = record[\"Id\"].ToString();\n\t\t\t\tApi.TeamNetwork.ObjectService.EditWithAlias(DEPARTMENTS, recordId, record);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tprivate static List<Employee> GetHeadsOfDepartment()\n\t{\n\t\tXmlDocument soapEnvelopeXml = CreateSoapEnvelopeGetHeadsOfDepartment (DateTime.Now, String.Empty);\n\t\tstring json = CallWebService (SOAP_URL, SOAP_ACTION, soapEnvelopeXml);\n\t\tvar heads = JsonConvert.DeserializeObject<List<Employee>>(json);\n\t\treturn heads;\n\t}\n\t\n\tprivate static void FillHeadRecord(Dictionary<string, object> dict, Employee emp)\n\t{\n\t\tdict[\"Name\"] = emp.Person.Name;\n\t\tdict[\"CodeERFL\"] = emp.Person.CodeERFL;\n\t\tDateTime date;\n\t\tif (DateTime.TryParseExact(emp.Person.BirthDay, \"yyyy-MM-ddTHH:mm:ss\", null, System.Globalization.DateTimeStyles.None, out date))\n\t\t{\n\t\t\tdict[\"BirthDay\"] = date;\n\t\t}\n\t\tdict[\"Code\"] = emp.Code;\n\t\tdict[\"DepartmentID\"] = emp.DepartmentID;\n\t\tdict[\"Position\"] = emp.Position;\n\t\tdict[\"TypeOfEmployment\"] = emp.TypeOfEmployment;\n\t\tdict[\"DepartmentESO\"] = emp.DepartmentESO;\n\t\tdict[\"DepartmentName\"] = emp.DepartmentName;\n\t}\t\t\n\t\n\tprivate static XmlDocument CreateSoapEnvelopeGetHeadsOfDepartment(DateTime date, string departmentId)\n\t{\n\t\tXmlDocument soapEnvelopeDocument = new XmlDocument();\n        string envelope = COMMAND_PATTERN; // string.Format(COMMAND_PATTERN, date.ToString(\"yyyy-MM-dd\"), String.IsNullOrEmpty(departmentId) ? \"?\" : departmentId);\n\t\tsoapEnvelopeDocument.LoadXml(envelope);\n\t\treturn soapEnvelopeDocument;\n\t}\n\t\n\tprivate static string CallWebService(string url, string action, XmlDocument soapEnvelopeXml)\n\t{\n\t\tHttpWebRequest webRequest = CreateWebRequest(url, action);\n\t\tWriteDocument(webRequest, COMMAND_PATTERN);\n        \n\t\tstring json = string.Empty;\n\t\tusing (WebResponse webResponse = webRequest.GetResponse())\n\t\t{\n\t\t\tstring soapResult;\n\t\t\tusing (StreamReader rd = new StreamReader(webResponse.GetResponseStream()))\n\t\t\t{\n\t\t\t\tsoapResult = rd.ReadToEnd();\n\t\t\t}\n\t\t\tXmlDocument doc = new XmlDocument();\n\t\t\tdoc.LoadXml(soapResult);\n\t\t\tvar jsonElement = doc.GetElementsByTagName(\"m:return\");\n\t\t\tif (jsonElement.Count > 0)\n\t\t\t\tjson = jsonElement[0].InnerText;\n\t\t}\n\t\treturn json;\n\t}\n\t\n\tprivate static void WriteDocument(HttpWebRequest webRequest, string message)\n\t{\n\t\tusing (Stream stream = webRequest.GetRequestStream())\n\t\t{\n            using(StreamWriter writer = new StreamWriter(stream, Encoding.UTF8))\n            {\n                writer.Write(message);\n                writer.Flush();\n            }\n\t\t}\n\t}\n\t\n\tprivate static HttpWebRequest CreateWebRequest(string url, string action)\n\t{\t\n\t\tHttpWebRequest webRequest = (HttpWebRequest)WebRequest.Create(url);\n\t\twebRequest.Headers.Add(\"SOAPAction\", action);\n\t\t//string auth = \"Basic \" + Convert.ToBase64String(System.Text.Encoding.Default.GetBytes(\"WebServiceEmployWorkers\" + \":\" + \"LJj5iWV\"));\n\t\t//webRequest.Headers.Add(\"Authorization\", \"Basic V2ViU2VydmljZUVtcGxveVdvcmtlcnM6TEpqNWlXVg==\");\n        //webRequest.Credentials = new NetworkCredential(\"WebServiceEmployWorkers\", \"LJj5iWV\");\n        webRequest.KeepAlive = true;\n\t\twebRequest.ContentType = \"text/xml;charset=\\\"utf-8\\\"\";\n\t\twebRequest.Accept = \"text/xml\";\n\t\twebRequest.Method = \"POST\";\n\t\treturn webRequest;\n\t}\n\t\n\tpublic class Employee\n\t{\n\t\tpublic PersonInformation Person { get; set; }\n\t\tpublic string Code { get; set; }\n\t\tpublic string Name { get; set; }\n\t\tpublic string DepartmentID { get; set; }\n\t\tpublic string Position { get; set; }\n\t\tpublic string TypeOfEmployment { get; set; }\n\t\tpublic string DepartmentESO { get; set; }\n\t\tpublic string DepartmentName { get; set; }\n\t}\n\t\n\tpublic class PersonInformation\n\t{\n\t\tpublic string Name { get; set; }\n\t\tpublic string CodeERFL { get; set; }\n\t\tpublic string BirthDay { get; set; }\n\t}\n}",
        "Type": "CSharpExpression"
      }
    }
  },
  "FormAlias": {
    "$type": "Comindware.Platform.Contracts.GlobalAlias, Comindware.Platform.Contracts",
    "Type": "ProcessForm",
    "Owner": "DepartmentHeadsLoader"
  },
  "BehaviourState": "Undefined",
  "Title": " Задача на выполнение сценария 1",
  "IsTitleSet": false,
  "Position": {
    "$type": "Comindware.Platform.Contracts.VectorModel, Comindware.Platform.Contracts",
    "X": 400.0,
    "Y": 85.0
  },
  "Size": {
    "$type": "Comindware.Platform.Contracts.DimensionsModel, Comindware.Platform.Contracts",
    "Width": 120.0,
    "Height": 70.0
  },
  "Owner": {
    "$type": "Comindware.Platform.Contracts.GlobalAlias, Comindware.Platform.Contracts",
    "Type": "Activity",
    "Owner": "DepartmentHeadsLoader",
    "Alias": "pool1"
  },
  "OwnerEmbeddedProcessActivityAlias": {
    "$type": "Comindware.Platform.Contracts.GlobalAlias, Comindware.Platform.Contracts",
    "Type": "Undefined"
  },
  "MountedOnAlias": {
    "$type": "Comindware.Platform.Contracts.GlobalAlias, Comindware.Platform.Contracts",
    "Type": "Undefined"
  },
  "Type": "Task"
}