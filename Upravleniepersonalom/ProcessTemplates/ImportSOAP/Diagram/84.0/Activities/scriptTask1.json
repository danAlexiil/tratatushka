{
  "$type": "Comindware.Platform.Contracts.TaskActivityModel, Comindware.Platform.Contracts",
  "GlobalAlias": {
    "$type": "Comindware.Platform.Contracts.GlobalAlias, Comindware.Platform.Contracts",
    "Type": "Activity",
    "Owner": "ImportSOAP",
    "Alias": "scriptTask1"
  },
  "Kind": "Script",
  "ScriptDefinition": {
    "$type": "Comindware.Platform.Contracts.ScriptTaskDefinitionModel, Comindware.Platform.Contracts",
    "MaxExecutionTime": "03:00:00",
    "AttemptCount": 1,
    "AttemptInterval": "00:00:00",
    "Script": {
      "$type": "Comindware.Platform.Contracts.CustomRuleModel, Comindware.Platform.Contracts",
      "Type": "Custom",
      "Definition": {
        "$type": "Comindware.Platform.Contracts.CSharpRuleDefinitionModel, Comindware.Platform.Contracts",
        "Code": "using Newtonsoft.Json;\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nusing System.Net;\nusing System.Text;\nusing System.Xml;\nusing System.Xml.Linq;\nusing System.Xml.Serialization;\n\n\npublic class Script\n{\n    private const string COMMAND_PATTERN = @\"<?xml version=\"\"1.0\"\" encoding=\"\"utf-8\"\"?>\n    <soapenv:Envelope xmlns:soapenv=\"\"http://schemas.xmlsoap.org/soap/envelope/\"\" xmlns:dep=\"\"http://www.MFTI.ru/xml/departmets\"\">\n   <soapenv:Header/>\n   <soapenv:Body>\n      <dep:GetStaffUnit>\n         <dep:financialAccountIdList>{0}</dep:financialAccountIdList>\n      </dep:GetStaffUnit>\n   </soapenv:Body>\n</soapenv:Envelope>\";\n\n    private const string SOLUTION_NAME = \"Upravleniepersonalom\";\n\n    private const string SOAP_CONFIG_VAR = \"SOAP_CONFIG\";\n\n    private const string SOAP_SERVICE = \"STAFF_UNIT\";\n\n    private const string FLS_ENTITY = \"FLS\";\n\n    private const string STAFF_UNIT_PAYMENT_ENTITY = \"ShtatnoeraspisanieNadbavki\";\n\n    private const string STAFF_UNIT_PAYMENT_INDICATOR_ENTITY = \"ShtatnoeraspisanieIndikatornadbavki\";\n\n    private const int FLS_GROUP_COUNT = 500;\n\n    public static void Main(Comindware.Process.Api.Data.ScriptContext context, Comindware.Entities entities)\n    {\n        SoapConfig cfg = null;\n        Comindware.ImportSoapData inst = entities.ImportSoapData.First(item => item.id == context.BusinessObjectId);\n        if (inst == null)\n            throw new Exception(\"NULLLL\");\n        try\n        {\n            inst.DateTime = DateTime.Now;\n            inst.ProcessId = context.ProcessId;\n            inst.ServiceName = SOAP_SERVICE;\n            string soap_config_file = Api.Solution.SolutionVariableService.GetValue(SOLUTION_NAME, SOAP_CONFIG_VAR).ToString();\n            cfg = LoadConfig(soap_config_file, SOAP_SERVICE);\n            var flsItems = Api.TeamNetwork.ObjectService.ListWithAlias(FLS_ENTITY);\n            var count = flsItems.Count;\n            var orderedItems = flsItems.OrderByDescending(item => item[\"Srok\"]).ToList();\n            var index = 0;\n            var localUnits = Api.TeamNetwork.ObjectService.ListWithAlias(cfg.ComindwareEntity);\n            var paymentItems = Api.TeamNetwork.ObjectService.ListWithAlias(STAFF_UNIT_PAYMENT_ENTITY);\n            var paymentIndicators = Api.TeamNetwork.ObjectService.ListWithAlias(STAFF_UNIT_PAYMENT_INDICATOR_ENTITY);\n            while (index < count)\n            {\n                var flsRange = orderedItems.GetRange(index, Math.Min(count - index, FLS_GROUP_COUNT));\n                var flsList = flsRange.Select(item => item[\"Id1c\"].ToString()).ToArray();\n                var flsListString = string.Join(\",\", flsList);\n\t\t\t\tinst.ErrorMessage += flsListString;\n                var command = string.Format(COMMAND_PATTERN, flsListString);\n                index += FLS_GROUP_COUNT;\n                var doc = CallWebService(cfg, command);\n                var response = Parse(doc, cfg.XmlNamespace);\n                if (response == null)\n                {\n                    inst.Success = false;\n                    inst.ErrorCode = \"STAFF_UNIT_0002\";\n                    string message = \"XML does not contain <return> element\";\n                    if (cfg != null)\n                        message = cfg.ToString() + \"...\" + message;\n                    inst.ErrorMessage += message;\n                }\n                else\n                {\n                    inst.ServiceErrorCode = response.ErrorCode;\n                    inst.ServiceStatus = response.Status;\n                    inst.RecordAmount += response.StaffUnit.Count;\n                    var localUnitDict = localUnits\n                        .Where(item => flsList.Any(item2 => string.Equals(item2, item[\"FinancialAccountId\"].ToString(), StringComparison.OrdinalIgnoreCase)))\n                        .ToDictionary(item => item[\"StaffUnitId\"].ToString(), item => item[\"id\"]);\n                    Update(cfg.ComindwareEntity, response.StaffUnit, localUnitDict, paymentItems, paymentIndicators);\n                    inst.ErrorMessage += \"Success\";\n                    inst.Success = inst.Success.HasValue && inst.Success.Value && true;\n                }\n            }\n        }\n        catch (Exception exc)\n        {\n            inst.Success = false;\n            inst.ErrorCode = \"STAFF_UNIT_0001\";\n            string message = exc.ToString();\n            if (cfg != null)\n                message = cfg.ToString() + \"...\" + message;\n            inst.ErrorMessage += message;\n        }\n        entities.ImportSoapData.Edit(inst);\n    }\n\n    private static StaffUnitResponse Parse(XDocument doc, string xmlNamespace)\n    {\n        XNamespace ns = xmlNamespace;\n        var mReturn = doc.Descendants(ns + \"return\");\n        var element = mReturn.FirstOrDefault();\n        if (element == null)\n            return null;\n\n        var flsJson = JsonConvert.DeserializeObject<StaffUnitResponse>(element.Value);\n        return flsJson;\n    }\n\n    private static void UpdatePaymentIndicators(String paymentRecordId, PaymentsIndicators[] paymentsIndicators, ICollection<IDictionary<string, object>> paymentIndicators)\n    {\n        var indicators = paymentIndicators.Where(item => item[\"Payments\"].ToString() == paymentRecordId).ToDictionary(item => item[\"IndicatorsName\"], item => item[\"id\"]);\n        if (paymentsIndicators != null)\n        {\n            foreach (var indicator in paymentsIndicators)\n            {\n                var indicatorRecord = new Dictionary<string, object>();\n                FillPaymentIndicatorRecord(indicatorRecord, indicator, paymentRecordId);\n                if (indicators.ContainsKey(indicator.IndicatorsName))\n                {\n                    var indicatorRecordId = indicators[indicator.IndicatorsName].ToString();\n                    Api.TeamNetwork.ObjectService.EditWithAlias(STAFF_UNIT_PAYMENT_INDICATOR_ENTITY, indicatorRecordId, indicatorRecord);\n                    indicators.Remove(indicator.IndicatorsName);\n                }\n                else\n                {\n                    Api.TeamNetwork.ObjectService.CreateWithAlias(STAFF_UNIT_PAYMENT_INDICATOR_ENTITY, indicatorRecord);\n                }\n            }\n        }\n        foreach (var item in indicators.Keys)\n        {\n            Api.TeamNetwork.ObjectService.Delete(indicators[item].ToString());\n        }\n    }\n\n    private static void UpdatePayments(string staffUnitRecordId, Payments[] paymentsList,\n        ICollection<IDictionary<string, object>> paymentItems,\n        ICollection<IDictionary<string, object>> paymentIndicators)\n    {\n        var staffUnitPayments = paymentItems\n            .Where(item => item[\"StaffUnit\"].ToString() == staffUnitRecordId)\n            .ToDictionary(item => item[\"PaymentsGuid\"], item => item[\"id\"]);\n        if (paymentsList != null)\n        {\n            foreach (var payment in paymentsList)\n            {\n                var paymentRecord = new Dictionary<string, object>();\n                FillPaymentsRecord(paymentRecord, payment, staffUnitRecordId);\n                String paymentRecordId = null;\n                if (staffUnitPayments.ContainsKey(payment.PaymentsGUID))\n                {\n                    paymentRecordId = staffUnitPayments[payment.PaymentsGUID].ToString();\n                    Api.TeamNetwork.ObjectService.EditWithAlias(STAFF_UNIT_PAYMENT_ENTITY, paymentRecordId, paymentRecord);\n                    staffUnitPayments.Remove(payment.PaymentsGUID);\n                }\n                else\n                {\n                    paymentRecordId = Api.TeamNetwork.ObjectService.CreateWithAlias(STAFF_UNIT_PAYMENT_ENTITY, paymentRecord);\n                }\n                UpdatePaymentIndicators(paymentRecordId, payment.PaymentsIndicators, paymentIndicators);\n            }\n        }\n        foreach (var item in staffUnitPayments.Keys)\n        {\n            Api.TeamNetwork.ObjectService.Delete(staffUnitPayments[item].ToString());\n        }\n    }\n\n    private static void Update(string entity, List<StaffUnit> staffUnitList,\n        IDictionary<string, object> localUnitDict,\n        ICollection<IDictionary<string, object>> paymentItems,\n        ICollection<IDictionary<string, object>> paymentIndicators)\n    {\n        foreach (var staffUnit in staffUnitList)\n        {\n            var record = new Dictionary<string, object>();\n            FillRecord(record, staffUnit);\n            string recordId;\n            if (!localUnitDict.ContainsKey(staffUnit.Id))\n            {\n                recordId = Api.TeamNetwork.ObjectService.CreateWithAlias(entity, record);\n            }\n            else\n            {\n                recordId = localUnitDict[staffUnit.Id].ToString();\n                Api.TeamNetwork.ObjectService.EditWithAlias(entity, recordId, record);\n                localUnitDict.Remove(staffUnit.Id);\n            }\n            UpdatePayments(recordId, staffUnit.PaymentsList, paymentItems, paymentIndicators);\n        }\n        foreach (var item in localUnitDict.Keys)\n        {\n            var record = new Dictionary<string, object>();\n            record[\"IsActive\"] = false;\n            Api.TeamNetwork.ObjectService.EditWithAlias(entity, localUnitDict[item].ToString(), record);\n        }\n    }\n\n    private static void FillPaymentsRecord(IDictionary<string, object> dict, Payments payments, object staffUnitId)\n    {\n        dict[\"PaymentsGuid\"] = payments.PaymentsGUID;\n        dict[\"PaymentsName\"] = payments.PaymentsName;\n        SetDouble(dict, \"PaymentsAmount\", payments.PaymentsAmount);\n        dict[\"PaymentsType\"] = payments.PaymentsType;\n        dict[\"StaffUnit\"] = staffUnitId;\n    }\n\n    private static void FillPaymentIndicatorRecord(IDictionary<string, object> dict, PaymentsIndicators indicator, object paymentsId)\n    {\n        dict[\"IndicatorsName\"] = indicator.IndicatorsName;\n        SetDouble(dict, \"IndicatorsValue\", indicator.IndicatorsValue);\n        dict[\"Payments\"] = paymentsId;\n    }\n\n    private static void FillRecord(IDictionary<string, object> dict, StaffUnit staffUnit)\n    {\n        dict[\"StaffUnitId\"] = staffUnit.Id;\n        dict[\"FinancialAccountGuid\"] = staffUnit.FinancialAccountGUId;\n        dict[\"FinancialAccountId\"] = staffUnit.FinancialAccountId;\n        dict[\"Name\"] = staffUnit.Name;\n        dict[\"AbbreviateGuid\"] = staffUnit.AbbreviateGUID;\n        dict[\"Abbreviate\"] = staffUnit.Abbreviate;\n        dict[\"AbbreviateCategories\"] = staffUnit.AbbreviateCategories;\n        dict[\"AbbreviateCategoriesGuid\"] = staffUnit.AbbreviateCategoriesGUID;\n        dict[\"GradesRoleCategoriesGuid\"] = staffUnit.GradesRoleCategoriesGUID;\n        dict[\"GradesRoleCategories\"] = staffUnit.GradesRoleCategories;\n        dict[\"TariffSetGuid\"] = staffUnit.TariffSetGUID;\n        dict[\"TariffSet\"] = staffUnit.TariffSet;\n        dict[\"IsActive\"] = true;\n        SetDouble(dict, \"TotalRate\", staffUnit.TotalRate);\n        SetDouble(dict, \"FreeRate\", staffUnit.FreeRate);\n        SetDouble(dict, \"Payment\", staffUnit.Payment);\n        SetDouble(dict, \"Allowance\", staffUnit.Allowance);\n        SetDate(dict, \"LastUpdate\", staffUnit.LastUpdate);\n    }\n\n    private static void SetDouble(IDictionary<string, object> dict, string key, string sourceValue)\n    {\n        if (sourceValue == null)\n            return;\n        double d;\n        string val = sourceValue.Replace(\".\", \",\");\n        if (Double.TryParse(val, out d))\n        {\n            dict[key] = d;\n        }\n    }\n\n    private static void SetDate(IDictionary<string, object> dict, string key, string sourceValue)\n    {\n        DateTime date;\n        if (DateTime.TryParseExact(sourceValue, \"yyyy-MM-ddTHH:mm:ss\", null, System.Globalization.DateTimeStyles.None, out date))\n        {\n            dict[key] = date;\n        }\n    }\n\n    private static XDocument CallWebService(SoapConfig cfg, string command)\n    {\n        if (ServicePointManager.SecurityProtocol.HasFlag(SecurityProtocolType.Tls12) == false)\n        {\n            ServicePointManager.SecurityProtocol = ServicePointManager.SecurityProtocol | SecurityProtocolType.Tls12;\n        }\n        HttpWebRequest webRequest = CreateWebRequest(cfg, command);\n        return LoadResult(webRequest);\n    }\n\n    private static XDocument LoadResult(HttpWebRequest webRequest)\n    {\n        XDocument doc;\n        using (WebResponse webResponse = webRequest.GetResponse())\n        {\n            string soapResult;\n            using (StreamReader rd = new StreamReader(webResponse.GetResponseStream()))\n            {\n                soapResult = rd.ReadToEnd();\n            }\n            doc = XDocument.Parse(soapResult);\n        }\n        return doc;\n    }\n\n    private static HttpWebRequest CreateWebRequest(SoapConfig cfg, string command)\n    {\n        HttpWebRequest webRequest = (HttpWebRequest)WebRequest.Create(cfg.SoapUrl);\n        webRequest.Headers.Add(\"SOAPAction\", cfg.SoapAction);\n        webRequest.Credentials = new NetworkCredential(cfg.Login, cfg.Password);\n        webRequest.ContentType = \"text/xml;charset=\\\"utf-8\\\"\";\n        webRequest.Accept = \"text/xml\";\n        webRequest.Method = \"POST\";\n        if (!string.IsNullOrEmpty(cfg.SourceIpAddress))\n        {\n            webRequest.Proxy = null;\n       \t\twebRequest.ServicePoint.BindIPEndPointDelegate = delegate(ServicePoint servicePoint, IPEndPoint remoteEndPoint, int retryCount)\n\t\t\t{\n        \t\treturn new IPEndPoint(IPAddress.Parse(cfg.SourceIpAddress), 0);;\n        \t};\n        }\n\n        Encoding enc = Encoding.UTF8;\n        byte[] bytes = enc.GetBytes(command);\n        webRequest.ContentLength = bytes.Length;\n        using (Stream stream = webRequest.GetRequestStream())\n        {\n            stream.Write(bytes, 0, bytes.Length);\n        }\n        return webRequest;\n    }\n\n    private static SoapConfig LoadConfig(string link, string serviceName)\n    {\n        XmlSerializer formatter = new XmlSerializer(typeof(SoapConfig[]));\n        SoapConfig[] cfg;\n        using (FileStream fs = new FileStream(link, FileMode.Open))\n        {\n            cfg = (SoapConfig[])formatter.Deserialize(fs);\n        }\n        return cfg.FirstOrDefault(item => item.Name == serviceName);\n    }\n\n    [Serializable]\n    public class SoapConfig\n    {\n        [XmlAttribute]\n        public string Name { get; set; }\n        [XmlAttribute]\n        public string SoapUrl { get; set; }\n        [XmlAttribute]\n        public string SoapAction { get; set; }\n        [XmlElement]\n        public string Login { get; set; }\n        [XmlElement]\n        public string Password { get; set; }\n        [XmlAttribute]\n        public string XmlNamespace { get; set; }\n        [XmlAttribute]\n        public string ComindwareEntity { get; set; }\n\t\t[XmlAttribute]\n        public string SourceIpAddress { get; set; }\n\t\t\n\t\tpublic override string ToString()\n\t\t{\n\t\t\tStringBuilder sb = new StringBuilder();\n\t\t\tsb.AppendLine(string.Format(\"{0}.{1}\", \"Name\", Name));\n\t\t\tsb.AppendLine(string.Format(\"{0}.{1}\", \"SoapUrl\", SoapUrl));\n\t\t\tsb.AppendLine(string.Format(\"{0}.{1}\", \"SoapAction\", SoapAction));\n\t\t\tsb.AppendLine(string.Format(\"{0}.{1}\", \"XmlNamespace\", XmlNamespace));\n\t\t\tsb.AppendLine(string.Format(\"{0}.{1}\", \"ComindwareEntity\", ComindwareEntity));\n            sb.AppendLine(string.Format(\"{0}.{1}\", \"SourceIpAddress\", SourceIpAddress));\n\t\t\treturn sb.ToString();\n\t\t}\n    }\n\n    public class StaffUnitResponse\n    {\n        public List<StaffUnit> StaffUnit { get; set; }\n        public int ErrorCode { get; set; }\n        public string LastUpdate { get; set; }\n        public string Status { get; set; }\n    }\n\n    public class StaffUnit\n    {\n        public string Id { get; set; }\n        public string FinancialAccountGUId { get; set; }\n        public string FinancialAccountId { get; set; }\n        public string Name { get; set; }\n        public string AbbreviateGUID { get; set; }\n        public string Abbreviate { get; set; }\n        public string AbbreviateCategories { get; set; }\n        public string AbbreviateCategoriesGUID { get; set; }\n        public string GradesRoleCategoriesGUID { get; set; }\n        public string GradesRoleCategories { get; set; }\n        public string TariffSetGUID { get; set; }\n        public string TariffSet { get; set; }\n        public string TotalRate { get; set; }\n        public string FreeRate { get; set; }\n        public string Payment { get; set; }\n        public string Allowance { get; set; }\n        public string LastUpdate { get; set; }\n        public Payments[] PaymentsList { get; set; }\n    }\n\n    public class Payments\n    {\n        public string PaymentsGUID { get; set; }\n        public string PaymentsName { get; set; }\n        public string PaymentsAmount { get; set; }\n        public string PaymentsType { get; set; }\n        public PaymentsIndicators[] PaymentsIndicators { get; set; }\n    }\n\n    public class PaymentsIndicators\n    {\n        public string IndicatorsName { get; set; }\n        public string IndicatorsValue { get; set; }\n    }\n}",
        "Type": "CSharpExpression"
      }
    }
  },
  "FormAlias": {
    "$type": "Comindware.Platform.Contracts.GlobalAlias, Comindware.Platform.Contracts",
    "Type": "ProcessForm",
    "Owner": "ImportSOAP"
  },
  "BehaviourState": "Undefined",
  "Title": "Импорт вакансий",
  "IsTitleSet": false,
  "Position": {
    "$type": "Comindware.Platform.Contracts.VectorModel, Comindware.Platform.Contracts",
    "X": 540.0,
    "Y": 165.0
  },
  "Size": {
    "$type": "Comindware.Platform.Contracts.DimensionsModel, Comindware.Platform.Contracts",
    "Width": 120.0,
    "Height": 70.0
  },
  "Owner": {
    "$type": "Comindware.Platform.Contracts.GlobalAlias, Comindware.Platform.Contracts",
    "Type": "Activity",
    "Owner": "ImportSOAP",
    "Alias": "pool1"
  },
  "OwnerEmbeddedProcessActivityAlias": {
    "$type": "Comindware.Platform.Contracts.GlobalAlias, Comindware.Platform.Contracts",
    "Type": "Undefined"
  },
  "MountedOnAlias": {
    "$type": "Comindware.Platform.Contracts.GlobalAlias, Comindware.Platform.Contracts",
    "Type": "Undefined"
  },
  "Type": "Task"
}